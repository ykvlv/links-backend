services:
  postgres:
    image: postgres:16-alpine
    container_name: links-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:25.4
    container_name: links-clickhouse
    restart: unless-stopped
    ports:
      - "${CLICKHOUSE_PORT}:8123"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB:       ${CLICKHOUSE_DB}
      CLICKHOUSE_USER:     ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: links-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    command: ["redis-server", "--save", "", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:4.0
    container_name: links-kafka
    restart: unless-stopped
    ports:
      - "${KAFKA_PORT}:9094"
    volumes:
      - kafka-data:/bitnami/kafka
    environment:
      KAFKA_CFG_NODE_ID:                  "1"
      KAFKA_CFG_PROCESS_ROLES:            "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      KAFKA_CFG_LISTENERS:                      "INTERNAL://:9092,EXTERNAL://:9094,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS:           "INTERNAL://kafka:9092,EXTERNAL://${KAFKA_HOST}:${KAFKA_PORT}"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME:     "INTERNAL"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES:      "CONTROLLER"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redirector:
    build:
      context: ./redirector
      dockerfile: Dockerfile
    container_name: links-redirector
    restart: unless-stopped
    ports:
      - "${REDIRECTOR_PORT}:${REDIRECTOR_PORT}"
    environment:
      REDIRECTOR_PORT:         ${REDIRECTOR_PORT}
      REDIRECTOR_ROUTE_PREFIX: ${REDIRECTOR_ROUTE_PREFIX}
      POSTGRES_HOST:           postgres
      POSTGRES_PORT:           5432
      POSTGRES_DB:             ${POSTGRES_DB}
      POSTGRES_USER:           ${POSTGRES_USER}
      POSTGRES_PASSWORD:       ${POSTGRES_PASSWORD}
      REDIS_HOST:              redis
      REDIS_PORT:              6379
      REDIS_DB:                ${REDIS_DB}
      REDIS_PASSWORD:          ${REDIS_PASSWORD}
      CACHE_TTL_SECONDS:       ${CACHE_TTL_SECONDS}
      KAFKA_HOST:              kafka
      KAFKA_PORT:              9092
      KAFKA_TOPIC_CLICKS:      ${KAFKA_TOPIC_CLICKS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
#    healthcheck: TODO

  analytics:
    build:
      context: .
      dockerfile: ./links-analytics-application/Dockerfile
    container_name: links-analytics
    restart: unless-stopped
    ports:
      - "${ANALYTICS_PORT}:${ANALYTICS_PORT}"
    environment:
      ANALYTICS_PORT:           ${ANALYTICS_PORT}
      CLICKHOUSE_HOST:          clickhouse
      CLICKHOUSE_PORT:          8123
      CLICKHOUSE_DB:            ${CLICKHOUSE_DB}
      CLICKHOUSE_USER:          ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD:      ${CLICKHOUSE_PASSWORD}
      KAFKA_HOST:               kafka
      KAFKA_PORT:               9092
      KAFKA_TOPIC_CLICKS:       ${KAFKA_TOPIC_CLICKS}
      KAFKA_TOPIC_CLICKS_DLT:   ${KAFKA_TOPIC_CLICKS_DLT}
      ANALYTICS_CONSUMER_GROUP: ${ANALYTICS_CONSUMER_GROUP}
      IP2ASN_REL_PATH:          ${IP2ASN_REL_PATH}
      IP2ASN_URL:               ${IP2ASN_URL}
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
#    healthcheck: TODO

volumes:
  postgres-data:
  clickhouse-data:
  kafka-data:
